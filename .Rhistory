hist(data.df$w1)
data.df <- data.df[with(data.df, order(Q,g,t)),]
# f(survival) ~ grand mean from + site means from  + plot means + difference in treatment of plots +
#               w covariates of individuals + x covariates of sites
mu <- B0 + (B1*data.df$g) + (B2*data.df$Q) + (B3*data.df$w.g1) +
B4*data.df$w1 + B4*data.df$w2 +   #w vector
B5*data.df$x1 + B6*data.df$x2 + B7*data.df$x3  #x vector
#treatment of fence changes snow pack so might interact with slope of precip
y <- do.call(c,lapply(1:30, function(x) {
rbinom(length(data.df$y[data.df$g==x]),1,1-(sigmag^2/(B0+B2[x])))
}))
plot(mu, y)
plot(y~g, data = data.df)
oddstest <- data.frame(y.1 = y,mu = mu, data.df)
survival <- tapply(oddstest$y.1,oddstest$Q,function(x) log((sum(x)/length(x))/
(1-(sum(x)/length(x)))) )
#Odds ratio
plot(survival)
str(data.df)
#Defining the model
prevalence <- function(){
# Likelihood:
for(k in 1:nsite){
for(i in 1:nplot[k]){ # Within each site k, the number of plots is denoted by the vector nplot[k]
for(t in 1:nyear[k,i]){ # Within each plot i of site k, the number years it is surveyed is denoted by nyear[k,i]
for(j in 1:nobs[k,i,t]){ # The number of observations at plot i in year t is denoted by nobs[k,i,t]
y[k,i,j,t] ~ dbern(1-(1-pi[k,i,t])^n[k,i,j,t])
}
pi[k,i,t] <- ilogit(beta0[k,i] + beta1*x1[k,i,t] + beta2*x2[k,i,t])
}
beta0[k,i] ~ dnorm(alpha[k], 1/sigma[k]^2)
}
alpha[k] ~ dnorm(mu, 1/sigma0^2)
}
# Priors:
beta1 ~ dnorm(0, .01)
beta2 ~ dnorm(0, .01)
mu ~ dnorm(0, .01)
sigma0 ~ dunif(0,10)
for(k in 1:nsite){
sigma[k] ~ dunif(0,10)
}
}
nobs <- aggregate(g~t, data=data.df, function(x) length)
nobs
nobs <- aggregate(g~t, data=data.df, function(x) length(x))
nobs
nobs <- aggregate(g~t+Q, data=data.df, function(x) length(x))
nobs
y_site <- lapply(1:6, FUN= function(Q) B0 + B1_site[Q])
y_site
34*6
34*30
for(Q in 1:6){
site_y[Q] <- B0+B1_site[Q]
for(g in 1:30){ #When we say there are same number of plots per site
plot_y[g] <- rnorm(5,site_y[Q],B1_plot[g])
for(i in 1:1020){
y[i] <- rbinom(34,1, plot[g])
}
}
}
y <- c()
site_y <- c()
plot_y <- c()
for(Q in 1:6){
site_y[Q] <- B0+B1_site[Q]
for(g in 1:30){ #When we say there are same number of plots per site
plot_y[g] <- rnorm(5,site_y[Q],B1_plot[g])
for(i in 1:1020){
y[i] <- rbinom(34,1, plot[g])
}
}
}
B1_plot
B1_plot <- c(seq(-5,5,length.out = 30))
B1_site <- c(seq(-10,10,length.out = 6))
B1_plot
B_environ <- c(0.7,5)
B_w <- c(3,-0.5)
B_cofactor <- c(-3,0.1)
y <- c()
site_y <- c()
plot_y <- c()
for(Q in 1:6){
site_y[Q] <- B0+B1_site[Q]
for(g in 1:30){ #When we say there are same number of plots per site
plot_y[g] <- rnorm(5,site_y[Q],B1_plot[g])
for(i in 1:1020){
y[i] <- rbinom(34,1, plot[g])
}
}
}
B1_plot
c(rep(1:6,5))
rep(1:6,each=5)
y_site <- lapply(1:6, function(Q) rnorm(1,B0 + B1_site[Q],sigmaQ))   #
y_site
y_plot <- lapply(1:30, function(g){
lapply(c(rep(1:6,each=5)), function(Q){
rnorm(1,y_site[Q],B1_plot[g])
})})
(rep(1:6,each=5)
)
y_site
y_site <- do.call(c,lapply(1:6, function(Q) rnorm(1,B0 + B1_site[Q],sigmaQ)))   #
y_site
y_plot <- lapply(1:30, function(g){
lapply(c(rep(1:6,each=5)), function(Q){
rnorm(1,y_site[Q],B1_plot[g])
})})
y_site <- rep(lapply(1:6, function(Q) rnorm(1,B0 + B1_site[Q],sigmaQ)), each=5)   #
y_site
y_plot <- lapply(1:30, function(g){rnorm(1, y_site[g]+B1_plot[g], sigmag)})
y_site
y_site <- unlist(rep(lapply(1:6, function(Q) rnorm(1,B0 + B1_site[Q],sigmaQ)), each=5)) #
y_site
y_plot <- lapply(1:30, function(g){rnorm(1, y_site[g]+B1_plot[g], sigmag)})
y_plot
y_plot <- unlist(lapply(1:30, function(g){rnorm(1, y_site[g]+B1_plot[g], sigmag)}))
y_plot
y <- unlist(lapply(1:30, function(i) rbinom(34,1,y_plot[i])))
y
y <- unlist(lapply(1:30, function(i){ rbinom(34,1,y_plot[i])}))
?rbinom
lapply(1:30, function(i){ rbinom(34,1,y_plot[i])})
y_plot <- unlist(rep(lapply(1:30, function(g){rnorm(1, y_site[g]+B1_plot[g], sigmag)})), each=34)
y_plot <- unlist(rep(lapply(1:30, function(g){rnorm(1, y_site[g]+B1_plot[g], sigmag)}), each=34))
y_plot
y <- unlist(lapply(1:1020, function(i){ rbinom(1,1,y_plot[i])}))
y
y_plot
i<-1
rbinom(1,1,y_plot[i])
y <- unlist(lapply(1:1020, function(i){ rbinom(1,1,y_plot[i]/(1-y_plot[i]))})) #need to put in the log odd, logit somehow
install.packages("tidyverse")
set.seed(10)
#Make up known parameters
# 0 - inf
#log(survival/(1-survival)) ~ B0 + B1*factor(g) + B2*factor(Q) + B3*w1 + B4*w2 + B5*x1 + B6*x2
#intercept for survival of AsMi
#Set up long-form data,variable indiviuals (1 or 0), per variable plots (g) per site (Q) and variable years (t) per plot. Climate at the Q level, covariables at the i level.
siteN <- c(6,5,5,4,5,5)
B0 <- 30 # grand mean
sigmai <- 0.05 # variance among individuals
sigmaQ <- .1 # variance in mean among sites
sigmag <- .3 # variance around mean associated with plots
sigmaf <- .05 # variance around plots with factor or without
B1_plot <- c(seq(-5,5,length.out = 30))
B1_site <- c(seq(-10,10,length.out = 6))
B_environ <- c(0.7,5)
B_w <- c(3,-0.5)
B_cofactor <- c(-3,0.1)
#B1 <- rbeta(6, (B0^2 - B0^3 - B0*sigmaQ^2)/sigmaQ^2,     # true values of Site means
#            (B0-2*B0^2+B0^3-sigmaQ^2+B0*sigmaQ^2)/sigmaQ^2) #between 0 and 1
#B2 <- do.call(c,lapply(1:6, function(b){
#  rbeta(siteN[b],(B1[b]^2 - B1[b]^3 - B1[b]*sigmag^2)/sigmag^2, # true values of plot means
#        (B1[b]-2*B1[b]^2+B1[b]^3-sigmag^2+B1[b]*sigmag^2)/sigmag^2)})) # with true variance around each site
# plot factors
#B3 <- 0.25 #variance around mean for plots with vs. without fencing (or burn treatment)
# individual measurements, w
B4 <- 0.3 # slope for length increases survival?
B5 <- 0.55 # fruit increases survival
# site measurements, x
B6 <- 0.4 #more moisture means more survival
B7 <- 0.9 #more moisure
B8 <- -0.5 #hotter bad
####### ignore above
#Data structure to match different lengths of indexing
Q <- sort(sample(c(1,2,5,15,19,26), size=1000, replace=TRUE)) # sort to allow random number of appropraite plot repeats (individuals: i) for the right plots (g) per site (Q)
#Variable number of plots per site, 30 total plots
g <- c(sample(1:6,size=table(Q)[1], replace=TRUE),
sample(c(1:5)+6,size=table(Q)[2], replace=TRUE),
sample(c(1:5)+11,size=table(Q)[3], replace=TRUE),
sample(c(1:4)+16,size=table(Q)[4], replace=TRUE),
sample(c(1:5)+20,size=table(Q)[5], replace=TRUE),
sample(c(1:5)+25,size=table(Q)[6], replace=TRUE))
t <- do.call(c,lapply(1:30, function(plot){
if(plot<15){
sample(2000:2007,size=table(g)[plot], replace=TRUE)
} else {
sample(1999:2008,size=table(g)[plot], replace=TRUE)
}}) ) #subset of years, different lengths of years
nsite <- length(table(data.df$Q)) #number of site
nplot <- aggregate(g~Q,data=data.df, function(x) length(unique(x)))$g #plots per site
nyear <- aggregate(t~g,data=data.df, function(x) length(unique(x)))$t #years per plot
#nobs <- aggregate(g~t+Q, data=data.df, function(x) length(x))
table(data.df$g,data.df$Q)
sum(table(data.df$g,data.df$Q))
###same number per each
# 5 plots per site
# 34 indivudals per plot
# 1020 indiviudals total, 34 per plot
#Michelle's attempt
y <- c()
site_y <- c()
plot_y <- c()
y <- lapply()
for(Q in 1:6){
site_y[Q] <- B0+B1_site[Q]
for(g in 1:30){ #When we say there are same number of plots per site
plot_y[g] <- rnorm(5,site_y[Q],B1_plot[g])
for(i in 1:1020){
y[i] <- rbinom(34,1, plot[g])
}
}
}
y_site <- unlist(rep(lapply(1:6, function(Q) rnorm(1,B0 + B1_site[Q],sigmaQ)), each=5)) #
y_plot <- unlist(rep(lapply(1:30, function(g){rnorm(1, y_site[g]+B1_plot[g], sigmag)}), each=34))
logit2prob()
install.packages("tidyverse")
library(tidyverse)
y <- unlist(lapply(1:1020, function(i){ rbinom(1,1,y_plot[i]/(1-y_plot[i]))})) #need to put in the log odd, logit somehow
rbinom(1000, 1, 1-(B0+x)))
#y <- rbinom(1000,1,1-(sigmai^2/B0)) #the probability of a success
w1 <- runif(1000, 0, 90) #length of longest stem, or zero when y is 0
w2 <- rnorm(1000,200,50) # number of fruit per individual, zero when length < 15
#create climate varaibles
gQt <- data.frame(Q,g,t)[with(data.frame(Q,g,t), order(Q,g,t)),]
climate.sim <- data.frame(unique(gQt), x1 = rnorm(nrow(unique(gQt)),100,5), #precip december
x2 = rnorm(nrow(unique(gQt)), 80,2),  #precip November
x3 = rnorm(nrow(unique(gQt)), 30, 3)) #max temp July
#plot level factor fenced or not (or burn treatment)
G1 <- data.frame(g= unique(g),w.g1 = rbinom(30,1,0.5))
data.df <- data.frame(y,g,Q,t,w1,w2)
data.df <- merge(data.df,climate.sim,by=c("g","Q","t"))
data.df <- merge(data.df, G1, by="g")
data.df$w1[data.df$y==0] <- 0 # can't have length if didn't emmerge
data.df$w2[data.df$w1 < 15] <- 0 #can't flower if smaller than 15cm
hist(data.df$w1)
data.df <- data.df[with(data.df, order(Q,g,t)),]
# f(survival) ~ grand mean from + site means from  + plot means + difference in treatment of plots +
#               w covariates of individuals + x covariates of sites
mu <- B0 + (B1*data.df$g) + (B2*data.df$Q) + (B3*data.df$w.g1) +
B4*data.df$w1 + B4*data.df$w2 +   #w vector
B5*data.df$x1 + B6*data.df$x2 + B7*data.df$x3  #x vector
#treatment of fence changes snow pack so might interact with slope of precip
y <- do.call(c,lapply(1:30, function(x) {
rbinom(length(data.df$y[data.df$g==x]),1,1-(sigmag^2/(B0+B2[x])))
}))
plot(mu, y)
plot(y~g, data = data.df)
oddstest <- data.frame(y.1 = y,mu = mu, data.df)
survival <- tapply(oddstest$y.1,oddstest$Q,function(x) log((sum(x)/length(x))/
(1-(sum(x)/length(x)))) )
#Odds ratio
plot(survival)
str(data.df)
#Defining the model
prevalence <- function(){
# Likelihood:
for(k in 1:nsite){
for(i in 1:nplot[k]){ # Within each site k, the number of plots is denoted by the vector nplot[k]
for(t in 1:nyear[k,i]){ # Within each plot i of site k, the number years it is surveyed is denoted by nyear[k,i]
for(j in 1:nobs[k,i,t]){ # The number of observations at plot i in year t is denoted by nobs[k,i,t]
y[k,i,j,t] ~ dbern(1-(1-pi[k,i,t])^n[k,i,j,t])
}
pi[k,i,t] <- ilogit(beta0[k,i] + beta1*x1[k,i,t] + beta2*x2[k,i,t])
}
beta0[k,i] ~ dnorm(alpha[k], 1/sigma[k]^2)
}
alpha[k] ~ dnorm(mu, 1/sigma0^2)
}
# Priors:
beta1 ~ dnorm(0, .01)
beta2 ~ dnorm(0, .01)
mu ~ dnorm(0, .01)
sigma0 ~ dunif(0,10)
for(k in 1:nsite){
sigma[k] ~ dunif(0,10)
}
}
install.packages("tidyverse")
?logit2prob
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
library(tidyverse)
?logit2prob
install.packages("modelr")
library(modelr)
?logit2prob
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
i<-1
logit2prob(y_plot[i])
y <- unlist(lapply(1:1020, function(i){ rbinom(1,1,logit2prob(y_plot[i]))})) #need to put in the log odd, logit somehow
logit2prob(y_plot
)
y_plot
range(y_plot)
length(y_plot)
y_plot_prob <- logit2prob(y_plot)
y_plot_prob
y <- unlist(lapply(1:1020, function(i){ rbinom(1,1,logit2prob(y_plot[i]))}))
y
mean(y)
y_plot <- unlist(rep(lapply(1:30, function(g){rnorm(1, y_site[g]+B1_plot[g], sigmag)}), each=34))
y_plot
y_site
siteN <- c(6,5,5,4,5,5)
B0 <- 3 # grand mean
sigmai <- 0.05 # variance among individuals
sigmaQ <- .1 # variance in mean among sites
sigmag <- .3 # variance around mean associated with plots
sigmaf <- .05 # variance around plots with factor or without
B1_plot <- c(seq(-.5,.5,length.out = 30))
B1_site <- c(seq(-1,1,length.out = 6))
B_environ <- c(0.7,5)
B_w <- c(3,-0.5)
B_cofactor <- c(-3,0.1)
y_site <- unlist(rep(lapply(1:6, function(Q) rnorm(1,B0 + B1_site[Q],sigmaQ)), each=5)) #
y_plot <- unlist(rep(lapply(1:30, function(g){rnorm(1, y_site[g]+B1_plot[g], sigmag)}), each=34))
y_plot_prob <- logit2prob(y_plot)
y <- unlist(lapply(1:1020, function(i){ rbinom(1,1,logit2prob(y_plot[i]))}))
y
y_plot_prob
y_plot
nsite
nplot
g
data.df.
data.df
Q <- sort(sample(c(1,2,5,15,19,26), size=1000, replace=TRUE)) # sort to allow random number of appropraite plot repeats (individuals: i) for the right plots (g) per site (Q)
#Variable number of plots per site, 30 total plots
g <- c(sample(1:6,size=table(Q)[1], replace=TRUE),
sample(c(1:5)+6,size=table(Q)[2], replace=TRUE),
sample(c(1:5)+11,size=table(Q)[3], replace=TRUE),
sample(c(1:4)+16,size=table(Q)[4], replace=TRUE),
sample(c(1:5)+20,size=table(Q)[5], replace=TRUE),
sample(c(1:5)+25,size=table(Q)[6], replace=TRUE))
t <- do.call(c,lapply(1:30, function(plot){
if(plot<15){
sample(2000:2007,size=table(g)[plot], replace=TRUE)
} else {
sample(1999:2008,size=table(g)[plot], replace=TRUE)
}}) ) #subset of years, different lengths of years
nsite <- length(table(data.df$Q)) #number of site
nplot <- aggregate(g~Q,data=data.df, function(x) length(unique(x)))$g #plots per site
nyear <- aggregate(t~g,data=data.df, function(x) length(unique(x)))$t #years per plot
table(data.df$g,data.df$Q)
t
Q <- sort(sample(c(1,2,5,15,19,26), size=1000, replace=TRUE)) # sort to allow random number of appropraite plot repeats (individuals: i) for the right plots (g) per site (Q)
#Variable number of plots per site, 30 total plots
g <- c(sample(1:6,size=table(Q)[1], replace=TRUE),
sample(c(1:5)+6,size=table(Q)[2], replace=TRUE),
sample(c(1:5)+11,size=table(Q)[3], replace=TRUE),
sample(c(1:4)+16,size=table(Q)[4], replace=TRUE),
sample(c(1:5)+20,size=table(Q)[5], replace=TRUE),
sample(c(1:5)+25,size=table(Q)[6], replace=TRUE))
t <- do.call(c,lapply(1:30, function(plot){
if(plot<15){
sample(2000:2007,size=table(g)[plot], replace=TRUE)
} else {
sample(1999:2008,size=table(g)[plot], replace=TRUE)
}}) ) #subset of years, different lengths of years
#Individual measurements [i]
w1 <- runif(1000, 0, 90) #length of longest stem, or zero when y is 0
w2 <- rnorm(1000,200,50) # number of fruit per individual, zero when length < 15
#create climate varaibles, Site measurements [Q]
gQt <- data.frame(Q,g,t)[with(data.frame(Q,g,t), order(Q,g,t)),]
climate.sim <- data.frame(unique(gQt), x1 = rnorm(nrow(unique(gQt)),100,5), #precip december
x2 = rnorm(nrow(unique(gQt)), 80,2),  #precip November
x3 = rnorm(nrow(unique(gQt)), 30, 3)) #max temp July
#plot level factor fenced or not (or burn treatment) [g]
G1 <- data.frame(g= unique(g),w.g1 = rbinom(30,1,0.5))
data.df <- data.frame(y,g,Q,t,w1,w2)
str(Q)
str(g)
str(t)
str(y)
G1
data.df <- data.frame(g,Q,t,w1,w2,G1)
data.df <- merge(data.df,climate.sim,by=c("g","Q","t"))
data.df <- merge(data.df, G1, by="g")
climate.sim
data.df <- merge(data.df, G1, by="g") # merge with plot level factor (y/n fencing)
data.df <- data.frame(g,Q,t,w1,w2)
data.df <- merge(data.df,climate.sim,by=c("g","Q","t")) #merge with climate per site per year
data.df <- merge(data.df, G1, by="g") # merge with plot level factor (y/n fencing)
B0_plotfence <- 0.25 #variance around mean for plots with vs. without fencing (or burn treatment), offset for fenced
set.seed(10)
#Make up known parameters
# 0 - inf
#log(survival/(1-survival)) ~ B0 + B1*factor(g) + B2*factor(Q) + B3*w1 + B4*w2 + B5*x1 + B6*x2
#intercept for survival of AsMi
#Set up long-form data,variable indiviuals (1 or 0), per variable plots (g) per site (Q) and variable years (t) per plot. Climate at the Q level, covariables at the i level.
siteN <- c(6,5,5,4,5,5)
B0 <- 3 # grand mean
sigmai <- 0.05 # variance among individuals
sigmaQ <- .3 # variance in mean among sites, spatial differences
sigmag <- .1 # variance around mean associated with plots, more similar
sigmaf <- .05 # variance around plots with factor or without
B1_plot <- c(seq(-.5,.5,length.out = 30))
B1_site <- c(seq(-1,1,length.out = 6))
B_environ <- c(0.7,5)
B_w <- c(3,-0.5)
B_cofactor <- c(-3,0.1)
#Not beta! doesn't need to be [0-1]
#B1 <- rbeta(6, (B0^2 - B0^3 - B0*sigmaQ^2)/sigmaQ^2,     # true values of Site means
#            (B0-2*B0^2+B0^3-sigmaQ^2+B0*sigmaQ^2)/sigmaQ^2) #between 0 and 1
#B2 <- do.call(c,lapply(1:6, function(b){
#  rbeta(siteN[b],(B1[b]^2 - B1[b]^3 - B1[b]*sigmag^2)/sigmag^2, # true values of plot means
#        (B1[b]-2*B1[b]^2+B1[b]^3-sigmag^2+B1[b]*sigmag^2)/sigmag^2)})) # with true variance around each site
# plot factors
B0_plotfence <- 0.25 #variance around mean for plots with vs. without fencing (or burn treatment), offset for fenced
# individual measurements, w
B4 <- 0.3 # slope for length increases survival?
B5 <- 0.55 # fruit increases survival
# site measurements, x
B6 <- 0.4 #more moisture means more survival
B7 <- 0.9 #more moisure, bigger slope change than the first moisture one
B8 <- -0.5 #hotter bad
#Data structure to match different lengths of indexing
Q <- sort(sample(c(1,2,5,15,19,26), size=1000, replace=TRUE)) # sort to allow random number of appropraite plot repeats (individuals: i) for the right plots (g) per site (Q)
#Variable number of plots per site, 30 total plots
g <- c(sample(1:6,size=table(Q)[1], replace=TRUE),
sample(c(1:5)+6,size=table(Q)[2], replace=TRUE),
sample(c(1:5)+11,size=table(Q)[3], replace=TRUE),
sample(c(1:4)+16,size=table(Q)[4], replace=TRUE),
sample(c(1:5)+20,size=table(Q)[5], replace=TRUE),
sample(c(1:5)+25,size=table(Q)[6], replace=TRUE))
t <- do.call(c,lapply(1:30, function(plot){
if(plot<15){
sample(2000:2007,size=table(g)[plot], replace=TRUE)
} else {
sample(1999:2008,size=table(g)[plot], replace=TRUE)
}}) ) #subset of years, different lengths of years
#Individual measurements [i]
w1 <- runif(1000, 0, 90) #length of longest stem, or zero when y is 0
w2 <- rnorm(1000,200,50) # number of fruit per individual, zero when length < 15, multiplied by survival vector will make 0 have 0 length and 1 have simluated random length
#create climate varaibles, Site measurements [Q]
gQt <- data.frame(Q,g,t)[with(data.frame(Q,g,t), order(Q,g,t)),]
climate.sim <- data.frame(unique(gQt), x1 = rnorm(nrow(unique(gQt)),100,5), #precip december
x2 = rnorm(nrow(unique(gQt)), 80,2),  #precip November
x3 = rnorm(nrow(unique(gQt)), 30, 3)) #max temp July
#plot level factor fenced or not (or burn treatment) [g]
G1 <- data.frame(g= unique(g),w.g1 = rbinom(30,1,0.5))
data.df <- data.frame(g,Q,t,w1,w2)
data.df <- merge(data.df,climate.sim,by=c("g","Q","t")) #merge with climate per site per year
data.df <- merge(data.df, G1, by="g") # merge with plot level factor (y/n fencing)
#How to simulate individual covariates based on simulated survival data??
data.df$w2[data.df$w1 < 15] <- 0 #can't flower if smaller than 15cm
hist(data.df$w1)
data.df <- data.df[with(data.df, order(Q,g,t)),]
nsite <- length(table(data.df$Q)) #number of site
nplot <- aggregate(g~Q,data=data.df, function(x) length(unique(x)))$g #plots per site
nyear <- aggregate(t~g,data=data.df, function(x) length(unique(x)))$t #years per plot
#nobs <- aggregate(g~t+Q, data=data.df, function(x) length(x))
table(data.df$g,data.df$Q)
sum(table(data.df$g,data.df$Q))
###same number per each
# 5 plots per site
# 34 indivudals per plot
# 1020 indiviudals total, 34 per plot
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
y_site <- unlist(rep(lapply(1:nsite, function(Q) rnorm(1,B0 + B1_site[Q],sigmaQ)), each=5)) #
y_plot <- unlist(rep(lapply(1:30, function(g){rnorm(1, y_site[g]+B1_plot[g], sigmag)}), each=34))
y_plot_prob <- logit2prob(y_plot)
y <- unlist(lapply(1:1020, function(i){ rbinom(1,1,logit2prob(y_plot[i]))}))
# f(survival) ~ grand mean from + site means from  + plot means + difference in treatment of plots +
#               w covariates of individuals + x covariates of sites
mu <- B0 + (B1*data.df$g) + (B2*data.df$Q) + (B3*data.df$w.g1) +
B4*data.df$w1 + B4*data.df$w2 +   #w vector
B5*data.df$x1 + B6*data.df$x2 + B7*data.df$x3  #x vector
#treatment of fence changes snow pack so might interact with slope of precip
y <- do.call(c,lapply(1:30, function(x) {
rbinom(length(data.df$y[data.df$g==x]),1,1-(sigmag^2/(B0+B2[x])))
}))
plot(mu, y)
plot(y~g, data = data.df)
oddstest <- data.frame(y.1 = y,mu = mu, data.df)
survival <- tapply(oddstest$y.1,oddstest$Q,function(x) log((sum(x)/length(x))/
(1-(sum(x)/length(x)))) )
#Odds ratio
plot(survival)
str(data.df)
#Defining the model
prevalence <- function(){
# Likelihood:
for(k in 1:nsite){
for(i in 1:nplot[k]){ # Within each site k, the number of plots is denoted by the vector nplot[k]
for(t in 1:nyear[k,i]){ # Within each plot i of site k, the number years it is surveyed is denoted by nyear[k,i]
for(j in 1:nobs[k,i,t]){ # The number of observations at plot i in year t is denoted by nobs[k,i,t]
y[k,i,j,t] ~ dbern(1-(1-pi[k,i,t])^n[k,i,j,t])
}
pi[k,i,t] <- ilogit(beta0[k,i] + beta1*x1[k,i,t] + beta2*x2[k,i,t])
}
beta0[k,i] ~ dnorm(alpha[k], 1/sigma[k]^2)
}
alpha[k] ~ dnorm(mu, 1/sigma0^2)
}
# Priors:
beta1 ~ dnorm(0, .01)
beta2 ~ dnorm(0, .01)
mu ~ dnorm(0, .01)
sigma0 ~ dunif(0,10)
for(k in 1:nsite){
sigma[k] ~ dunif(0,10)
}
}
library(R2jags)
library(lme4)
require(lme4)
